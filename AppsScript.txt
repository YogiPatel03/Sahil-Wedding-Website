// Firebase Firestore to Google Sheets - Complete Version

// Service Account setup - KEEP YOUR EXISTING SERVICE_ACCOUNT OBJECT HERE
const SERVICE_ACCOUNT = {
  // Your existing service account details
  "type": "service_account",
  "project_id": "sahil-wedding-website",
  "private_key_id": "5ecf263474e9dc41805bbfad5f7f5a92e73db79b",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCMjyBNMVTKpaWb\nLzHkuRYaMJ30/sSA9OkZuZXSVnAGZEOkKXW5OxVVmKZJj6POWror7DVfdcLWxEoV\nfs9T5ksj9kVpZzjizwWH5ySPqCYAQp2xM3ebHqcbPbIE6zR0sQDxG4EeC5J0lmn/\nI51NkdITaw0La5Yv6VGWw0tmHxd1qg02+HwQgUCevZKIaEreUvktxKCbn4+XgtfZ\n4MrAzEr1D06mkwVugL4J/zJfpPaOU5ZimeoDaZJsnXZ7j/hN6tHXEZTCKrPVVzHN\nhbfEXENrFKNg3jgXPdRjjDxFSpAkpg/7272wXbizXVnAWYx8ua3BzuipRVqI9oVN\nbwR5t0KbAgMBAAECggEAMRy1aaNqACCe27lC0qtFKMOB/Z+jI3fvlrh8u/DN1b3k\n0JBX/O/DBZR/zcYtsyWKVVyETaWE/au6QwZ7BNK7wIYFPM3/V2iEgzblVHipRoAA\nP3E/QmkUdHU7JXLVckyCirxUgh4C/0+rG6XjCb6Ay54lAa+G25jHlEkKqFUGymqq\n8UcWPm3W2hqOaOejghLYmw87E2x0vKUMv/bdDVw6u+H0GPGdoJSBIr5oUn9i2rhk\nnE1SLVIIn+CydT2AptPb4axDPmjvWA+VEEr77pFLntM2J1Yl21ILrNgrzPw7koIQ\njUdVuSdKJNX9IGCyyGHIUntz5JbgBwjAvyLGrtQPkQKBgQDDsbHh1qp0WTiWRm88\nYkbANLDnOyeIui3VZObIwZqdaj4xpGglrK5oAM81gvOltwGLFvZix58WMn8oCOBc\nq00yC1gkzKputQF2zjhrics0HWn5zvwkzBtmLJl2bnNNvhFnpQp9Ave5z1OTmEYM\n28enpit/oRhyYKiR+sl+6NAkWQKBgQC339Ri9bLrcNML2RYEo3wzRb+B2ht7G7Gg\nqIS+3H1Z35g+R6bFNvhtiy1K8OLZLJs4u4NZJPXDByiToKr1Xp26Ys2J//DUCMTu\njCb7ptlYMUt9xgVjq0eOywL/jrAUgB5pOhN66s6zJegOmIWVdh8aX5zD9F4t6FOW\nYKMyzBcQEwKBgQCRRDIArEJiFe0MmIJwN5+/hB2huGazd0kYtEsg0Z69paU/YoSx\nGstohtlKJshIxl3N6yDA2OA+MQP1KwmpoLuwH32x63/EqHbKw3BcW7BNIlyNxNml\nUyIvqYHNyVWsayAuaPQtMmvEMaQf1xSA7RD7YT2/A03LcfcQTjMPEzGXGQKBgDYm\nMIHEIaC8ZSqED7vl+VmQHMm81YL3sOPDPPSIMlIZSthseWxyt85qwjfjoKqcPEoE\nzrWd8NIydXykQDRqXMDa//S37tBClNw7Ye+SP0d9nOG5QzUK59PhbUydVLV01X/f\nnoUASUbwztodiJlvY9F8fsomWOXkGVmbs/Ptro0JAoGBAKTqR3DmZGsUSY728rcz\nLSD0N4tDLzf8Q9xCNTFzpMG5I9TQMEf+6luRMahFSDH/Hjcd9L7fy27fWVKcbpGe\ng0ApvBa39ao0dIHDXlGYbjn25kh5vHVIwD8yM8CyZ2vV6OQcZMSaV1MJVBpAeaHf\nlHCUEMMLx/YxKcfu34cZTqmu\n-----END PRIVATE KEY-----\n",
  "client_email": "firebase-adminsdk-fbsvc@sahil-wedding-website.iam.gserviceaccount.com",
  "client_id": "113830041295877802265",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fbsvc%40sahil-wedding-website.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
};

// Collection to fetch
const COLLECTION_NAME = "rsvps";

// Google Sheet setup with updated header row
const SHEET_NAME = "RSVP Responses";
const HEADER_ROW = [
  "Name", 
  "Email", 
  "Invitation Code", 
  "Attending",
  "Guest Count", 
  "Events", 
  "Arrival Date", 
  "Departure Date",
  "Saturday Dinner Choice", 
  "Grah Shanti Guests",
  "Notes", 
  "Timestamp"
];

/**
 * Creates a menu item in Google Sheets UI
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('Firebase')
    .addItem('Fetch RSVP Data', 'fetchAndDisplayRSVPData')
    .addToUi();
}

/**
 * Gets a Firebase access token using service account
 */
function getFirebaseAccessToken() {
  // Private key comes from your downloaded service account JSON
  const privateKey = SERVICE_ACCOUNT.private_key.replace(/\\n/g, '\n');
  
  // Create a JWT with the right claims
  const jwtClaims = {
    "iss": SERVICE_ACCOUNT.client_email,
    "scope": "https://www.googleapis.com/auth/datastore",
    "aud": "https://oauth2.googleapis.com/token",
    "exp": Math.floor(Date.now() / 1000) + 3600,
    "iat": Math.floor(Date.now() / 1000)
  };
  
  // Sign the JWT
  const jwtHeader = Utilities.base64EncodeWebSafe(JSON.stringify({
    "alg": "RS256",
    "typ": "JWT"
  }));
  
  const jwtClaimset = Utilities.base64EncodeWebSafe(JSON.stringify(jwtClaims));
  const signatureInput = jwtHeader + "." + jwtClaimset;
  const signature = Utilities.base64EncodeWebSafe(
    Utilities.computeRsaSha256Signature(signatureInput, privateKey)
  );
  
  const jwt = signatureInput + "." + signature;
  
  // Exchange the JWT for an access token
  const response = UrlFetchApp.fetch("https://oauth2.googleapis.com/token", {
    method: "post",
    payload: {
      "grant_type": "urn:ietf:params:oauth:grant-type:jwt-bearer",
      "assertion": jwt
    }
  });
  
  const responseObj = JSON.parse(response.getContentText());
  
  if (responseObj.error) {
    throw new Error("Error getting access token: " + responseObj.error_description);
  }
  
  return responseObj.access_token;
}

/**
 * Fetches RSVP data from Firestore
 * @return {Array} RSVP data records
 */
function fetchRSVPDataAlternative() {
  const projectId = SERVICE_ACCOUNT.project_id;
  const databaseName = "(default)";
  
  // Construct Firebase REST API URL
  const url = `https://firestore.googleapis.com/v1/projects/${projectId}/databases/${databaseName}/documents/${COLLECTION_NAME}`;
  
  // Get access token using service account
  const token = getFirebaseAccessToken();
  
  try {
    const response = UrlFetchApp.fetch(url, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`
      },
      muteHttpExceptions: true
    });
    
    const responseCode = response.getResponseCode();
    const responseBody = response.getContentText();
    
    Logger.log(`Response code: ${responseCode}`);
    Logger.log(`First 500 chars of response: ${responseBody.substring(0, 500)}`);
    
    if (responseCode !== 200) {
      throw new Error(`Failed to fetch data: ${responseBody}`);
    }
    
    const data = JSON.parse(responseBody);
    
    if (!data.documents) {
      Logger.log("No documents found or unexpected response format");
      return [];
    }
    
    return parseFirestoreDocuments(data);
  } catch (error) {
    Logger.log(`Error in fetchRSVPDataAlternative: ${error}`);
    throw error;
  }
}

/**
 * Parses Firestore document format into a simpler array
 * @param {Object} responseData - Raw Firestore response
 * @return {Array} Parsed RSVP records
 */
function parseFirestoreDocuments(responseData) {
  const rsvpData = [];
  
  if (!responseData.documents || !responseData.documents.length) {
    Logger.log("No documents found in the response");
    return rsvpData;
  }
  
  responseData.documents.forEach(doc => {
    try {
      // Extract fields from document
      const fields = doc.fields || {};
      
      // Get attending status to handle different data formats
      const attending = getFieldValue(fields.attending) === true;
      
      // Create rsvp object with extracted values - handles both attending and non-attending
      const rsvp = {
        fullName: getFieldValue(fields.fullName) || 
                  (getFieldValue(fields.firstName) + " " + getFieldValue(fields.lastName)),
        email: getFieldValue(fields.email) || "",
        invitationCode: getFieldValue(fields.invitationCode),
        attending: attending,
        guestCount: attending ? getFieldValue(fields.guestCount) || 0 : "-",
        invitedEvents: attending ? getArrayFieldValue(fields.invitedEvents) : "N/A",
        arrivalDate: attending ? getFieldValue(fields.arrivalDate) || "-" : "-",
        departureDate: attending ? getFieldValue(fields.departureDate) || "-" : "-",
        dinnerChoice: attending ? getFieldValue(fields.dinnerChoice) || "-" : "-",
        grahShantiGuests: attending && fields.grahShantiGuests ? getFieldValue(fields.grahShantiGuests) : "-",
        notes: getFieldValue(fields.notes) || "",
        timestamp: getFieldValue(fields.timestamp) || new Date().toISOString()
      };
      
      rsvpData.push(rsvp);
    } catch (error) {
      Logger.log(`Error parsing document: ${error}`);
      // Continue with next document
    }
  });
  
  return rsvpData;
}

/**
 * Extract field value from Firestore field format
 * @param {Object} field - Firestore field object
 * @return {any} Extracted value
 */
function getFieldValue(field) {
  if (!field) return "";
  
  // Check all possible field types
  if (field.stringValue !== undefined) return field.stringValue;
  if (field.integerValue !== undefined) return parseInt(field.integerValue, 10);
  if (field.doubleValue !== undefined) return field.doubleValue;
  if (field.booleanValue !== undefined) return field.booleanValue;
  if (field.timestampValue !== undefined) return field.timestampValue;
  if (field.arrayValue !== undefined) return getArrayFieldValue(field);
  if (field.mapValue !== undefined) return JSON.stringify(field.mapValue.fields || {});
  
  return "";
}

/**
 * Extract array values from Firestore array field
 * @param {Object} field - Firestore array field
 * @return {string} Comma-separated values
 */
function getArrayFieldValue(field) {
  if (!field || !field.arrayValue || !field.arrayValue.values) return "";
  
  const values = field.arrayValue.values.map(item => getFieldValue(item));
  return values.join(", ");
}

/**
 * Fetches RSVP data and updates the Google Sheet
 */
function fetchAndDisplayRSVPData() {
  try {
    // Get the active spreadsheet and sheet
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(SHEET_NAME);
    
    // Create the sheet if it doesn't exist
    if (!sheet) {
      sheet = ss.insertSheet(SHEET_NAME);
    }
    
    // Clear existing data
    sheet.clear();
    
    // Add header row
    sheet.appendRow(HEADER_ROW);
    
    // Format header row
    sheet.getRange(1, 1, 1, HEADER_ROW.length).setFontWeight("bold");
    
    // Fetch RSVP data
    const rsvpData = fetchRSVPDataAlternative();
    
    // If no data, log message
    if (rsvpData.length === 0) {
      Logger.log("No RSVP data found in Firestore");
      // Try to show UI alert only if UI is available
      try {
        const ui = SpreadsheetApp.getUi();
        ui.alert("No RSVP data found in Firestore");
      } catch (uiError) {
        // UI not available, just continue
        Logger.log("UI not available: " + uiError.toString());
      }
      return;
    }
    
    // Add data rows - Updated to include new fields
    rsvpData.forEach(rsvp => {
      sheet.appendRow([
        rsvp.fullName,
        rsvp.email || "-",
        rsvp.invitationCode,
        rsvp.attending ? "Yes" : "No", // Convert boolean to Yes/No
        rsvp.guestCount,
        rsvp.invitedEvents,
        rsvp.arrivalDate,
        rsvp.departureDate,
        rsvp.dinnerChoice,
        rsvp.grahShantiGuests,
        rsvp.notes,
        rsvp.timestamp
      ]);
    });
    
    // Auto resize columns to fit content
    sheet.autoResizeColumns(1, HEADER_ROW.length);
    
    // Format the data as a table
    const dataRange = sheet.getRange(1, 1, rsvpData.length + 1, HEADER_ROW.length);
    dataRange.setBorder(true, true, true, true, true, true);
    
    const successMessage = `Successfully imported ${rsvpData.length} RSVP records`;
    Logger.log(successMessage);
    
    // Try to show UI alert only if UI is available
    try {
      const ui = SpreadsheetApp.getUi();
      ui.alert(successMessage);
    } catch (uiError) {
      // UI not available, just continue
      Logger.log("UI not available: " + uiError.toString());
    }
    
  } catch (error) {
    Logger.log("Error in fetchAndDisplayRSVPData: " + error.toString());
    // Try to show UI alert only if UI is available
    try {
      const ui = SpreadsheetApp.getUi();
      ui.alert("Error: " + error.toString());
    } catch (uiError) {
      // UI not available, just log the original error
      Logger.log("UI not available: " + uiError.toString());
    }
  }
}