rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Invitations collection - only allow read access with valid invitation code
    match /invitations/{invitationCode} {
      allow read: if true; // Allow read to validate invitations
      allow write: if false; // No client-side writes to invitations
    }
    
    // RSVPs collection - allow both create and update
    match /rsvps/{rsvpId} {
      // No client-side reads except for the RSVP owner
      allow read: if request.auth != null && 
        resource.data.invitationCode == request.auth.token.invitationCode;
      
      // Allow listing RSVPs by invitation code to find existing responses
      allow list: if true;
      
      // Rules for non-attending submissions (minimal data required)
      allow create, update: if 
        request.resource.data.attending == false &&
        request.resource.data.keys().hasAll([
          'lastName', 'firstName', 'invitationCode', 'attending', 'timestamp'
        ]);
      
      // Rules for attending submissions (full data required)
      allow create, update: if 
        request.resource.data.attending == true &&
        request.resource.data.keys().hasAll([
          'fullName', 'email', 'lastName', 'firstName', 
          'invitedEvents', 'guestCount', 'invitationCode', 
          'attending', 'arrivalDate', 'departureDate', 'timestamp', 'dinnerChoice'
        ]) &&
        // Validate invitedEvents contains "The Wedding" and optionally "Grah Shanti"
        request.resource.data.invitedEvents.size() >= 1 && 
        request.resource.data.invitedEvents.size() <= 2 &&
        request.resource.data.invitedEvents[0] == "The Wedding" &&
        (request.resource.data.invitedEvents.size() == 1 || 
         (request.resource.data.invitedEvents.size() == 2 && 
          request.resource.data.invitedEvents[1] == "Grah Shanti")) &&
        // Validate guestCount is a number
        request.resource.data.guestCount is number &&
        // Validate grahShantiGuests if present, allowing 0 as a valid value
        (!request.resource.data.keys().hasAny(['grahShantiGuests']) || 
         request.resource.data.grahShantiGuests is number);
    }
  }
} 